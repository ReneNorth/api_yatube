

SERIALIZER

class CommentsSerializer(serializers.ModelSerializer):
    post = serializers.PrimaryKeyRelatedField(many=False,
                                              queryset=Post.objects.all())
    author = serializers.SlugRelatedField(read_only=True,
                                          slug_field='username')

    class Meta:
        model = Comment
        fields = ('id', 'author', 'post', 'text', 'created')
        read_only_fields = ('author',)
        extra_kwargs = {'text': {'required': True}}



VIEWS

class CommentsRetDelPatchViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all()
    serializer_class = CommentsSerializer
    permission_classes = [CommentsPermission, ]

    def perform_create(self, request):
        post_id = self.kwargs.get('id')
        serializer = CommentsSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(author=self.request.user)
            print(self.request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def get_queryset(self):
        post = get_object_or_404(Post, pk=self.kwargs.get('id'))
        self.check_object_permissions(self.request, post)
        self.queryset = Comment.objects.filter(post_id=post.id)
        return self.queryset


PERMISSIONS

class AuthorOrReadOnly(permissions.BasePermission):
    def has_permission(self, request, view):
        return (
            request.method in permissions.SAFE_METHODS
            or request.user.is_authenticated
        )

    def has_object_permission(self, request, view, obj):
        return obj.author == request.user


class CommentsPermission(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated

    def has_object_permission(self, request, view, obj):
        if request.method == 'GET':
            return True
        return obj.author == request.user
